/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module roundmanager_26 (
    input clk,
    input rst,
    input [4:0] p1colours,
    input p1enter,
    input [4:0] p2colours,
    input p2enter,
    output reg [2:0] p1indicator,
    output reg [2:0] p2indicator,
    output reg [4:0] roundlights,
    output reg [15:0] debug
  );
  
  
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [1-1:0] M_alu_spoiler;
  alu_39 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .spoiler(M_alu_spoiler),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  reg [2:0] M_roundno_d, M_roundno_q = 1'h0;
  reg [1:0] M_p1score_d, M_p1score_q = 1'h0;
  reg [1:0] M_p2score_d, M_p2score_q = 1'h0;
  reg [1:0] M_winner_d, M_winner_q = 1'h0;
  reg M_p1ready_d, M_p1ready_q = 1'h0;
  reg M_p2ready_d, M_p2ready_q = 1'h0;
  reg [31:0] M_clock_d, M_clock_q = 1'h0;
  localparam IDLE_rounder = 4'd0;
  localparam COUNTDOWN_rounder = 4'd1;
  localparam DISONE_rounder = 4'd2;
  localparam PLAYONE_rounder = 4'd3;
  localparam DISTWO_rounder = 4'd4;
  localparam PLAYTWO_rounder = 4'd5;
  localparam DISTHREE_rounder = 4'd6;
  localparam PLAYTHREE_rounder = 4'd7;
  localparam DISFOUR_rounder = 4'd8;
  localparam PLAYFOUR_rounder = 4'd9;
  localparam DISFIVE_rounder = 4'd10;
  localparam PLAYFIVE_rounder = 4'd11;
  localparam SCORE_rounder = 4'd12;
  localparam GAMEOVER_rounder = 4'd13;
  
  reg [3:0] M_rounder_d, M_rounder_q = IDLE_rounder;
  wire [2-1:0] M_glv4_winner;
  wire [8-1:0] M_glv4_debug;
  reg [3-1:0] M_glv4_roundno;
  reg [1-1:0] M_glv4_reset;
  reg [5-1:0] M_glv4_p1colours;
  reg [1-1:0] M_glv4_p1enter;
  reg [5-1:0] M_glv4_p2colours;
  reg [1-1:0] M_glv4_p2enter;
  gamelogicv4_40 glv4 (
    .clk(clk),
    .rst(rst),
    .roundno(M_glv4_roundno),
    .reset(M_glv4_reset),
    .p1colours(M_glv4_p1colours),
    .p1enter(M_glv4_p1enter),
    .p2colours(M_glv4_p2colours),
    .p2enter(M_glv4_p2enter),
    .winner(M_glv4_winner),
    .debug(M_glv4_debug)
  );
  
  always @* begin
    M_rounder_d = M_rounder_q;
    M_p2ready_d = M_p2ready_q;
    M_p1score_d = M_p1score_q;
    M_p2score_d = M_p2score_q;
    M_clock_d = M_clock_q;
    M_p1ready_d = M_p1ready_q;
    M_roundno_d = M_roundno_q;
    M_winner_d = M_winner_q;
    
    debug = {8'h00, M_glv4_debug};
    M_alu_spoiler = 1'h0;
    p1indicator = 3'h0;
    p2indicator = 3'h0;
    roundlights = 5'h00;
    M_alu_alufn = 6'h00;
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    M_clock_d = M_clock_q + 1'h1;
    M_glv4_p1colours = p1colours;
    M_glv4_p1enter = p1enter;
    M_glv4_p2colours = p2colours;
    M_glv4_p2enter = p2enter;
    M_glv4_reset = 1'h1;
    M_glv4_roundno = 3'h7;
    if (M_rounder_q != IDLE_rounder && M_rounder_q != COUNTDOWN_rounder) begin
      
      case (M_p1score_q)
        2'h0: begin
          p1indicator = 3'h0;
        end
        2'h1: begin
          p1indicator = 3'h1;
        end
        2'h2: begin
          p1indicator = 3'h3;
        end
        2'h3: begin
          p1indicator = 3'h7;
        end
      endcase
      
      case (M_p2score_q)
        2'h0: begin
          p2indicator = 3'h0;
        end
        2'h1: begin
          p2indicator = 3'h1;
        end
        2'h2: begin
          p2indicator = 3'h3;
        end
        2'h3: begin
          p2indicator = 3'h7;
        end
      endcase
    end
    
    case (M_rounder_q)
      IDLE_rounder: begin
        if (p1enter) begin
          M_p1ready_d = 1'h1;
        end
        if (p2enter) begin
          M_p2ready_d = 1'h1;
        end
        M_alu_alufn = 6'h18;
        M_alu_a = {15'h0000, M_p1ready_q};
        M_alu_b = {15'h0000, M_p2ready_q};
        if (M_alu_alu == 16'h0001) begin
          M_clock_d = 1'h0;
          M_p1ready_d = 1'h0;
          M_p2ready_d = 1'h0;
          M_rounder_d = COUNTDOWN_rounder;
        end
      end
      COUNTDOWN_rounder: begin
        if (M_clock_q <= 32'h04000000) begin
          p1indicator = 3'h7;
          p2indicator = 3'h7;
          if (M_clock_q <= 32'h02000000) begin
            roundlights = 5'h1f;
          end
        end else begin
          if (M_clock_q <= 32'h08000000) begin
            p1indicator = 3'h3;
            p2indicator = 3'h3;
            if (M_clock_q <= 32'h06000000) begin
              roundlights = 5'h1f;
            end
          end else begin
            if (M_clock_q <= 32'h0c000000) begin
              p1indicator = 3'h1;
              p2indicator = 3'h1;
              if (M_clock_q <= 32'h0a000000) begin
                roundlights = 5'h1f;
              end
            end else begin
              if (M_p1score_q == 2'h3 || M_p2score_q == 2'h3) begin
                M_rounder_d = GAMEOVER_rounder;
                M_clock_d = 1'h0;
              end else begin
                
                case (M_roundno_q)
                  3'h0: begin
                    M_rounder_d = DISONE_rounder;
                    M_clock_d = 1'h0;
                  end
                  3'h1: begin
                    M_rounder_d = DISTWO_rounder;
                    M_clock_d = 1'h0;
                  end
                  3'h2: begin
                    M_rounder_d = DISTHREE_rounder;
                    M_clock_d = 1'h0;
                  end
                  3'h3: begin
                    M_rounder_d = DISFOUR_rounder;
                    M_clock_d = 1'h0;
                  end
                  3'h4: begin
                    M_rounder_d = DISFIVE_rounder;
                    M_clock_d = 1'h0;
                  end
                  default: begin
                    M_rounder_d = GAMEOVER_rounder;
                    M_clock_d = 1'h0;
                  end
                endcase
              end
            end
          end
        end
      end
      DISONE_rounder: begin
        if (M_clock_q <= 32'h04000000) begin
          roundlights = 5'h08;
        end else begin
          if (M_clock_q <= 32'h08000000) begin
            roundlights = 5'h02;
          end else begin
            if (M_clock_q <= 32'h0c000000) begin
              roundlights = 5'h01;
            end else begin
              if (M_clock_q <= 32'h10000000) begin
                roundlights = 5'h04;
              end else begin
                if (M_clock_q <= 32'h14000000) begin
                  roundlights = 5'h10;
                end else begin
                  if (M_clock_q <= 32'h18000000) begin
                    roundlights = 5'h08;
                  end else begin
                    M_clock_d = 1'h0;
                    M_rounder_d = PLAYONE_rounder;
                  end
                end
              end
            end
          end
        end
      end
      PLAYONE_rounder: begin
        M_glv4_roundno = 3'h0;
        M_glv4_reset = 1'h0;
        if (M_glv4_winner != 2'h0) begin
          M_winner_d = M_glv4_winner;
          M_clock_d = 1'h0;
          M_rounder_d = SCORE_rounder;
        end
      end
      DISTWO_rounder: begin
        if (M_clock_q <= 32'h04000000) begin
          roundlights = 5'h04;
        end else begin
          if (M_clock_q <= 32'h08000000) begin
            roundlights = 5'h08;
          end else begin
            if (M_clock_q <= 32'h0c000000) begin
              roundlights = 5'h02;
            end else begin
              if (M_clock_q <= 32'h10000000) begin
                roundlights = 5'h01;
              end else begin
                if (M_clock_q <= 32'h14000000) begin
                  roundlights = 5'h04;
                end else begin
                  if (M_clock_q <= 32'h18000000) begin
                    roundlights = 5'h10;
                  end else begin
                    M_clock_d = 1'h0;
                    M_rounder_d = PLAYTWO_rounder;
                  end
                end
              end
            end
          end
        end
      end
      PLAYTWO_rounder: begin
        M_glv4_roundno = 3'h1;
        M_glv4_reset = 1'h0;
        if (M_glv4_winner != 2'h0) begin
          M_winner_d = M_glv4_winner;
          M_clock_d = 1'h0;
          M_rounder_d = SCORE_rounder;
        end
      end
      DISTHREE_rounder: begin
        if (M_clock_q <= 32'h04000000) begin
          roundlights = 5'h01;
        end else begin
          if (M_clock_q <= 32'h08000000) begin
            roundlights = 5'h02;
          end else begin
            if (M_clock_q <= 32'h0c000000) begin
              roundlights = 5'h10;
            end else begin
              if (M_clock_q <= 32'h10000000) begin
                roundlights = 5'h04;
              end else begin
                if (M_clock_q <= 32'h14000000) begin
                  roundlights = 5'h08;
                end else begin
                  if (M_clock_q <= 32'h18000000) begin
                    roundlights = 5'h01;
                  end else begin
                    if (M_clock_q <= 32'h1c000000) begin
                      roundlights = 5'h04;
                    end else begin
                      M_clock_d = 1'h0;
                      M_rounder_d = PLAYTHREE_rounder;
                    end
                  end
                end
              end
            end
          end
        end
      end
      PLAYTHREE_rounder: begin
        M_glv4_roundno = 3'h2;
        M_glv4_reset = 1'h0;
        if (M_glv4_winner != 2'h0) begin
          M_winner_d = M_glv4_winner;
          M_clock_d = 1'h0;
          M_rounder_d = SCORE_rounder;
        end
      end
      DISFOUR_rounder: begin
        if (M_clock_q <= 32'h04000000) begin
          roundlights = 5'h04;
        end else begin
          if (M_clock_q <= 32'h08000000) begin
            roundlights = 5'h02;
          end else begin
            if (M_clock_q <= 32'h0c000000) begin
              roundlights = 5'h10;
            end else begin
              if (M_clock_q <= 32'h10000000) begin
                roundlights = 5'h02;
              end else begin
                if (M_clock_q <= 32'h14000000) begin
                  roundlights = 5'h08;
                end else begin
                  if (M_clock_q <= 32'h18000000) begin
                    roundlights = 5'h10;
                  end else begin
                    if (M_clock_q <= 32'h1c000000) begin
                      roundlights = 5'h01;
                    end else begin
                      if (M_clock_q <= 32'h20000000) begin
                        roundlights = 5'h04;
                      end else begin
                        M_clock_d = 1'h0;
                        M_rounder_d = PLAYFOUR_rounder;
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      PLAYFOUR_rounder: begin
        M_glv4_roundno = 3'h3;
        M_glv4_reset = 1'h0;
        if (M_glv4_winner != 2'h0) begin
          M_winner_d = M_glv4_winner;
          M_clock_d = 1'h0;
          M_rounder_d = SCORE_rounder;
        end
      end
      DISFIVE_rounder: begin
        if (M_clock_q <= 32'h04000000) begin
          roundlights = 5'h10;
        end else begin
          if (M_clock_q <= 32'h08000000) begin
            roundlights = 5'h01;
          end else begin
            if (M_clock_q <= 32'h0c000000) begin
              roundlights = 5'h02;
            end else begin
              if (M_clock_q <= 32'h10000000) begin
                roundlights = 5'h08;
              end else begin
                if (M_clock_q <= 32'h14000000) begin
                  roundlights = 5'h04;
                end else begin
                  if (M_clock_q <= 32'h18000000) begin
                    roundlights = 5'h10;
                  end else begin
                    if (M_clock_q <= 32'h1c000000) begin
                      roundlights = 5'h01;
                    end else begin
                      if (M_clock_q <= 32'h20000000) begin
                        roundlights = 5'h10;
                      end else begin
                        if (M_clock_q <= 32'h24000000) begin
                          roundlights = 5'h02;
                        end else begin
                          M_clock_d = 1'h0;
                          M_rounder_d = PLAYFIVE_rounder;
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
      PLAYFIVE_rounder: begin
        M_glv4_roundno = 3'h4;
        M_glv4_reset = 1'h0;
        if (M_glv4_winner != 2'h0) begin
          M_winner_d = M_glv4_winner;
          M_clock_d = 1'h0;
          M_rounder_d = SCORE_rounder;
        end
      end
      SCORE_rounder: begin
        if (M_clock_q == 32'h0c000000) begin
          if (M_winner_q == 2'h1) begin
            M_roundno_d = M_roundno_q + 1'h1;
            M_alu_a = {14'h0000, M_p1score_q};
            M_alu_b = 16'h0001;
            M_alu_alufn = 6'h00;
            M_p1score_d = M_alu_alu[0+1-:2];
          end else begin
            if (M_winner_q == 2'h2) begin
              M_roundno_d = M_roundno_q + 1'h1;
              M_alu_a = {14'h0000, M_p2score_q};
              M_alu_b = 16'h0001;
              M_alu_alufn = 6'h00;
              M_p2score_d = M_alu_alu[0+1-:2];
            end
          end
        end
        if (M_clock_q == 32'h18000000) begin
          M_alu_a = {14'h0000, M_p1score_q};
          M_alu_b = 16'h0003;
          M_alu_alufn = 6'h35;
          if (M_alu_alu == 16'h0000) begin
            M_rounder_d = GAMEOVER_rounder;
            M_winner_d = 1'h0;
            M_clock_d = 1'h0;
          end
        end
        if (M_clock_q == 32'h18000001) begin
          M_alu_a = {14'h0000, M_p2score_q};
          M_alu_b = 16'h0003;
          M_alu_alufn = 6'h35;
          if (M_alu_alu == 16'h0000) begin
            M_rounder_d = GAMEOVER_rounder;
            M_winner_d = 1'h0;
            M_clock_d = 1'h0;
          end else begin
            M_rounder_d = COUNTDOWN_rounder;
            M_winner_d = 1'h0;
            M_clock_d = 1'h0;
          end
        end
      end
      GAMEOVER_rounder: begin
        roundlights = 5'h1f;
        if (p1enter) begin
          M_p1ready_d = 1'h1;
        end
        if (p2enter) begin
          M_p2ready_d = 1'h1;
        end
        M_alu_alufn = 6'h18;
        M_alu_a = {15'h0000, M_p1ready_q};
        M_alu_b = {15'h0000, M_p2ready_q};
        if (M_alu_alu == 16'h0001) begin
          M_clock_d = 1'h0;
          M_p1ready_d = 1'h0;
          M_p2ready_d = 1'h0;
          M_p1score_d = 1'h0;
          M_p2score_d = 1'h0;
          M_roundno_d = 1'h0;
          M_rounder_d = IDLE_rounder;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_roundno_q <= 1'h0;
      M_p1score_q <= 1'h0;
      M_p2score_q <= 1'h0;
      M_winner_q <= 1'h0;
      M_p1ready_q <= 1'h0;
      M_p2ready_q <= 1'h0;
      M_clock_q <= 1'h0;
      M_rounder_q <= 1'h0;
    end else begin
      M_roundno_q <= M_roundno_d;
      M_p1score_q <= M_p1score_d;
      M_p2score_q <= M_p2score_d;
      M_winner_q <= M_winner_d;
      M_p1ready_q <= M_p1ready_d;
      M_p2ready_q <= M_p2ready_d;
      M_clock_q <= M_clock_d;
      M_rounder_q <= M_rounder_d;
    end
  end
  
endmodule
